{"version":3,"sources":["Images/eoslogo.png","serviceWorker.js","Requests/getChainData.js","ListView.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","rpc","JsonRpc","require","fetch","getHeadBlock","a","get_info","info","console","error","JSON","stringify","getBlocks","startingBlock","tillValue","x","arrayToPass","get_block","returnedValue","push","ListView","props","componentDidMount","executeSearch","that","setState","loaded","then","headBlock","head_block_num","state","numberofBlocks","handleClick","e","titleProps","index","activeIndex","newIndex","bind","blockValue","this","Segment","inverted","style","height","Image","src","eos","size","floated","marginTop","Header","as","color","Subheader","Button","className","basic","onClick","Divider","fallback","data","List","divided","relaxed","map","i","Accordion","id","timestamp","Title","active","Icon","name","Content","Item","key","nl2br","Mustache","render","Component","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.647e5cca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/eoslogo.072eac31.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const { JsonRpc } = require('eosjs');\nconst fetch = require('node-fetch');\nconst rpc = new JsonRpc('https://api.eosdetroit.io/', { fetch });\n\n  export async function getHeadBlock() {\n    try {\n      let info = await rpc.get_info();\n      return info;\n    } catch (error) {\n      console.error(JSON.stringify(error));\n    }\n  }\n\n  export async function getBlocks(startingBlock, tillValue) {\n    try {\n      let x = 0;\n      let arrayToPass = []\n      while (x < tillValue) {\n      let returnedValue = await rpc.get_block((startingBlock - x));\n      arrayToPass.push(returnedValue);\n      x++;\n    }\n      return arrayToPass;\n    } catch (error) {\n      console.error(JSON.stringify(error));\n  }\n  }\n  ","import React, { Component, Suspense, Fragment } from 'react';\nimport nl2br from 'react-newline-to-break';\nimport _ from 'lodash';\nimport Mustache from 'mustache';\nimport { Accordion, List, Segment, Header, Image, Button, Divider, Icon } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport eos from './Images/eoslogo.png';\nimport './CSS/viewDefinitions.css';\nimport { getHeadBlock, getBlocks } from './Requests/getChainData';\nimport Loader from 'react-loader';\n\nexport default class ListView extends Component {\n  constructor(props) {\n    super(props);\n    this.executeSearch = this.executeSearch.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      headBlock: null,\n      blockValue: null,\n      arrayToPass: [],\n      numberofBlocks: 10,\n      activeIndex: null,\n      loaded: false,\n    };\n  }\n  \n  componentDidMount = async () => {\n    this.executeSearch();\n  }\n\n  executeSearch = async () => {\n    var that = this;\n    this.setState({loaded: false})\n    await getHeadBlock().then(function(getHeadBlock) {\n      that.setState({headBlock: getHeadBlock.head_block_num});\n   });\n   await getBlocks(this.state.headBlock, this.state.numberofBlocks).then(function(getBlocks) {\n    that.setState({arrayToPass: getBlocks});\n   })\n   this.setState({loaded: true})\n  }\n\n  handleClick = async (e, titleProps) => {\n    const { index } = titleProps\n    const { activeIndex } = this.state\n    const newIndex = activeIndex === index ? -1 : index\n    this.setState({ activeIndex: newIndex })\n  }\n  \n  render() {\n    const { activeIndex } = this.state;\n\n    const Child = ({data}) => (\n      <Loader className=\"adjustLoader\" loaded={this.state.loaded}>\n      <List divided inverted relaxed>\n        {data.map((x, i) => (\n          <Accordion inverted>\n          <List.Header className=\"fulldisplay\" as='h4'>Hash Block: {x.id} <br />\n          Dated: {x.timestamp}</List.Header>\n          <Accordion.Title\n          active={activeIndex === i}\n          index={i}\n          onClick={this.handleClick}\n        >\n          <Button className=\"buttonMargin\" color=\"yellow\" basic floated=\"right\" size=\"small\">\n          <Icon name='dropdown' />\n          Display Block\n          </Button>\n        </Accordion.Title>\n        <Accordion.Content active={activeIndex === i}>\n        <List.Item key={i}>\n        <List.Content className=\"fulldisplay\">\n\n            \n            {nl2br(Mustache.render(\"The Producer: {{producer}}\\n\" +\n            \"Confirmed Transactions: {{confirmed}}\\n\" +\n            \"Previous Block ID: {{previous}}\\n\" +\n            \"Transaction Merkle Root: {{transaction_mroot}}\\n\" +\n            \"Action Merkle Root: {{action_mroot}}\\n\" +\n            \"Schedule Version {{schedule_version}}\\n\" +\n            \"New Producers: {{new_producers}}\\n\" +\n            \"Producer Signature: {{producer_signature}}\\n\" +\n            \"Block Extensions: {{block_extensions}}\\n\" +\n            \"Block ID: {{id}}\\n\" +\n            \"Ref Block Prefix: {{ref_block_prefix}}\\n\\n\" +\n            \"Transactions in Block: \\n\" + \n            \"{{#transactions}}\\{\\nStatus: {{status}}\\nCPU Usage: {{cpu_usage_us}}\\nNet Usage Words:{{net_usage_words}}\\nTrx: {{trx}}\\n\\}\\n{{/transactions}}\\n\"\n            , x))}\n          \n        </List.Content>\n        </List.Item>\n        </Accordion.Content>\n        <Divider />\n      </Accordion>\n        ))}\n        </List>\n        </Loader>\n    );\n\n    return(\n  <Segment inverted style={{height: \"100%\"}}>\n    <Image src={eos} size='tiny' floated=\"left\" style={{marginTop: \"1vh\"}}/>\n    <Header as='h1' color=\"yellow\">EOS Blocks</Header>\n    <Header.Subheader>\n    <Button color=\"yellow\" className=\"adjustDisplayBlock\" size=\"medium\" basic>Current Head Block Displayed: {this.state.headBlock} </Button>\n      <Button onClick={() => this.executeSearch()} className=\"buttonMargin\" color=\"yellow\" basic floated=\"right\" size=\"medium\">\n        Load\n      </Button>\n    </Header.Subheader>\n    <Divider />\n      <Fragment>\n      <Suspense fallback={<div>Loading...</div>}>\n      {this.state.arrayToPass && (\n      <Child data={this.state.arrayToPass} />\n    )}\n  </Suspense>\n  </Fragment>\n  </Segment>\n);\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport ListView from './ListView';\n\nReactDOM.render(<ListView />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}